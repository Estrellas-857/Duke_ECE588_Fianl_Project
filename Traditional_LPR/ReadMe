Traditional License Plate Recognize(LPR)

Traditional LPR is a way that using computer vision and OCR (Optical Character Recognition). 

Here's a breakdown of its approach:

1. Loading and Preprocessing: The script starts by loading an image using OpenCV (cv2.imread). It checks if the image is loaded correctly and then converts it to grayscale for further processing.

2. Edge Detection using Sobel Operator: It applies the Sobel operator, a popular edge detection technique, in both horizontal (sobel_x) and vertical (sobel_y) directions. These operations help in highlighting the edges in the image, which is useful for identifying the rectangular shape of a license plate.

3. Thresholding and Noise Reduction: The script uses Gaussian blur for noise reduction, followed by Otsu's thresholding method (cv2.threshold). Thresholding converts the image to a binary image, making it easier to extract features and contours.

4. Morphological Operations: It performs dilation and erosion, which are morphological operations to enhance the structure of the image. These steps help in connecting broken parts of the object (like characters on the license plate) and removing small, irrelevant details.

5. Contour Detection and License Plate Extraction: The script then uses cv2.findContours to find different contours in the image. It looks for a contour with an aspect ratio that matches a typical license plate and extracts that region from the image.

6. License Plate Recognition using Tesseract OCR: The extracted license plate region is then passed to Tesseract OCR (pytesseract.image_to_string), an open-source OCR engine, to recognize the characters on the license plate. The script specifies a whitelist of characters (numbers and uppercase letters) to improve accuracy.

7. Optional Post-processing: The code includes commented sections that indicate the potential for post-processing, such as displaying intermediate results (using matplotlib.pyplot) and refining OCR results with regular expressions.
